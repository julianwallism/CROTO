begin -> block_statements

/* Literal */
literal -> STRING_VALUE | INTEGER_VALUE | FLOAT_VALUE | CHAR_VALUE | BOOLEAN_VALUE
    
/* Types */
type -> primitive_type | array_type
primitive_type -> numeric_type | BOOLEAN
numeric_type -> integral_type | FLOAT
integral_type -> INTEGER | CHAR
array_type -> primitive_type dims | IDENTIFIER dims 

/* Modifiers */
modifier_opt -> CONST | LAMBDA // FIXIT: usar modifier_opt en lugar de const en las producciones de mas abajo

/* VARIABLE DECLARATIONS*/
field_declaration -> modifier_opt type variable_declarators SEMICOLON
variable_declarators -> variable_declarator | variable_declarators COMMA variable_declarator
variable_declarator -> variable_declarator_id | variable_declarator_id EQUAL variable_initializer
variable_declarator_id -> IDENTIFIER
variable_initializer -> expression | array_initializer


/* METHOD DECLARATIONS */
method_declaration -> method_header method_body
mthd_header -> CROTOFUNC type mthd_declarator | CROTOFUNC mthd_declarator
mthd_declarator -> IDENTIFIER LPAREN f_parameter_list_opt RPAREN
f_parameter_list_opt -> LAMBDA | f_parameter_list
f_parameter_list -> f_parameter | f_parameter_list COMMA f_parameter
f_parameter -> type variable_declarator_id | CONST type variable_declarator_id
method_body -> block SEMICOLON


/* ARRAYS */
array_initializer -> LBRACE variable_initializers COMMA RBRACE | LBRACE variable_initializers RBRACE | LBRACE COMMA RBRACE | LBRACE RBRACE
variable_initializers -> variable_initializer | variable_initializers COMMA variable_initializer


/* BLOCKS AND STATEMENTS */
/* Blocks */
block -> LBRACE block_statements_opt RBRACE
block_statements_opt -> LAMBDA | block_statements
block_statements -> block_statement | block_statements block_statement
block_statement -> local_variable_declaration_statement | statement
local_variable_declaration_statement -> local_variable_declaration SEMICOLON
local_variable_declaration -> type variable_declarators | CONST type variable_declarators

/* Statements */
statement -> statement_with_no_trailing_substatement | if_statement | while_statement | for_statement
statement_expression_list -> statement_expression | statement_expression_list COMMA statement_expression
statement_with_no_trailing_substatement -> block | SEMICOLON | expression_statement | switch_statement | break_statement | return_statement
expression_statement -> statement_expression SEMICOLON
statement_expression -> assignment | preincrement_expression | predecrement_expression | postincrement_expression |	postdecrement_expression | method_invocation

/* If */
if_statement -> IF LPAREN expression RPAREN block | IF LPAREN expression RPAREN block ELSE block

/* Switch */ 
switch_statement  -> SWITCH LPAREN expression RPAREN switch_block
switch_block -> LBRACE switch_block_statement_groups switch_labels RBRACE | LBRACE switch_block_statement_groups RBRACE | LBRACE switch_labels RBRACE | LBRACE RBRACE
switch_block_statement_groups -> switch_block_statement_group | switch_block_statement_groups switch_block_statement_group
switch_block_statement_group -> switch_labels block_statements
switch_labels -> switch_label | switch_labels switch_label
switch_label -> CASE constant_expression COLON | DEFAULT COLON 

/* While */
while_statement -> WHILE LPAREN expression RPAREN block 

/* For */
for_statement -> FOR LPAREN for_init SEMICOLON expression_opt SEMICOLON for_updt RPAREN block
for_init -> statement_expression_list |	local_variable_declaration | LAMBDA
for_updt -> statement_expression_list | LAMBDA

/* Other */
identifier_opt -> IDENTIFIER | LAMBDA

break_statement -> BREAK SEMICOLON
return_statement -> RETURN expression_opt SEMICOLON

/* EXPRESSIONS */
primary -> primary_not_array | array_creation_expression
primary_not_array -> literal | LPAREN expression RPAREN | method_invocation | array_access 

/* Argument List */
argument_list_opt -> argument_list | LAMBDA
argument_list -> expression | argument_list COMMA expression

/* Array Creation */
array_creation_expression -> NEW primitive_type dim_exprs dims_opt | NEW primitive_type dims array_initializer //aÃ±adir new token
dim_exprs -> dim_expr | dim_exprs dim_expr
dim_expr -> LBRACK expression RBRACK
dims_opt -> dims | LAMBDA
dims -> LBRACK RBRACK dims LBRACK RBRACK

/* Methods */
method_invocation -> IDENTIFIER LPAREN argument_list_opt RPAREN

/* Arrays */ 
array_access -> IDENTIFIER LBRACK expression RBRACK | primary_not_array LBRACK expression RBRACK

unary_expression -> preincrement_expression | predecrement_expression | ADDITION unary_expression | MINUS unary_expression | unary_expression_not_plus_minus
preincrement_expression -> INCREMENT unary_expression 
predecrement_expression -> DECREMENT unary_expression
unary_expression_not_plus_minus -> NOT unary_expression

/* Aritmetic */
additive_expression -> multiplicative_expression | additive_expression ADDITION multiplicative_expression | additive_expression SUBTRACTION multiplicative_expression
multiplicative_expression -> unary_expression | multiplicative_expression MULTIPLICATION unary_expression | multiplicative_expression DIVISION unary_expression 

/* Relaciones */
relational_expression -> additive_expression | relational_expression LOWER additive_expression | relational_expression GREATER additive_expression | relational_expression LOWER_EQUAL additive_expression | relational_expression GREATER_EQUAL additive_expression 

/* Condiciones logicas */
conditional_expression -> conditional_or_expression
conditional_or_expression -> conditional_and_expression | conditional_or_expression OR conditional_and_expression
conditional_and_expression -> inclusive_or | conditional_and_expression AND inclusive_or
inclusive_or -> and_expression | inclusive_or OR and_expression
and_expression -> equality_expression | and_expression AND equality_expression
equality_expression -> relational_expression | equality_expression EQUAL relational_expression | equality_expression DIFFERENT relational_expression

/* Assignment */
assignment_expression -> conditional_expression | assignment
assignment -> left_hand_side EQUAL assignment_expression
left_hand_side -> IDENTIFIER | array_access

expression_opt -> expression | LAMBDA
expression -> assignment_expression
constant_expression -> expression