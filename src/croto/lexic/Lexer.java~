// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: D:/OneDrive - Universitat de les Illes Balears/GEIN 3 - UIB/3r Curs/1r Quatrimestre/Compiladors - 21780/Practica/CROTO/src/croto/lexic/Lexer.flex

/* UserCode */

package croto.lexic;
static import croto.lexic.Token.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\3\u1f00\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\3\u1f00\1\u3e00\1\u3f00\4\u1f00"+
    "\1\u4000\11\u1f00\3\u0100\1\u4100\1\u4200\13\u1f00\4\u0100\1\u4300"+
    "\63\u1f00\2\u0100\1\u4400\4\u1f00\1\u4500\100\u1f00\1\u4600\40\u1f00"+
    "\1\u4700\1\u4800\1\u1f00\1\u4900\1\u4a00\1\u4b00\1\u4c00\26\u1f00"+
    "\1\u4d00\21\u1f00\246\u0100\1\u4e00\20\u0100\1\u4f00\1\u5000\77\u1f00"+
    "\2\u0100\1\u5000\u0b05\u1f00\1\u5100\1\u5200\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\3\1\5\1\3\1\6\5\3\1\7\1\10"+
    "\3\3\1\11\1\12\11\13\3\3\1\14\3\3\32\6"+
    "\1\3\1\15\2\3\1\6\1\3\1\16\1\17\1\20"+
    "\1\6\1\21\5\6\1\22\1\23\1\6\1\24\1\25"+
    "\2\6\1\26\1\27\1\30\6\6\4\3\41\0\2\3"+
    "\4\6\4\3\1\6\2\3\1\0\7\3\1\6\4\3"+
    "\1\6\5\3\27\6\1\3\37\6\1\3\u01ca\6\4\3"+
    "\14\6\16\3\5\6\7\3\1\6\1\3\1\6\21\3"+
    "\160\0\5\6\1\3\2\6\2\3\4\6\10\3\1\6"+
    "\1\3\3\6\1\3\1\6\1\3\24\6\1\3\123\6"+
    "\1\3\213\6\1\3\5\0\2\3\236\6\11\3\46\6"+
    "\2\3\1\6\7\3\47\6\7\3\1\6\1\3\55\0"+
    "\1\3\1\0\1\3\2\0\1\3\2\0\1\3\1\0"+
    "\10\3\33\6\5\3\3\6\15\3\5\0\6\3\1\6"+
    "\4\3\13\0\5\3\53\6\37\0\4\3\2\6\1\0"+
    "\143\6\1\3\1\6\10\0\1\3\6\0\2\6\2\0"+
    "\1\3\4\0\2\6\12\0\3\6\2\3\1\6\17\3"+
    "\1\0\1\6\1\0\36\6\33\0\2\3\131\6\13\0"+
    "\1\6\16\3\12\0\41\6\11\0\2\6\4\3\1\6"+
    "\5\3\26\6\4\0\1\6\11\0\1\6\3\0\1\6"+
    "\5\0\22\3\31\6\3\0\104\3\1\6\1\3\13\6"+
    "\67\3\33\0\1\3\4\0\66\6\3\0\1\6\22\0"+
    "\1\6\7\0\12\6\2\0\2\3\12\0\1\3\7\6"+
    "\1\3\7\6\1\3\3\0\1\3\10\6\2\3\2\6"+
    "\2\3\26\6\1\3\7\6\1\3\1\6\3\3\4\6"+
    "\2\3\1\0\1\6\7\0\2\3\2\0\2\3\3\0"+
    "\1\6\10\3\1\0\4\3\2\6\1\3\3\6\2\0"+
    "\2\3\12\0\4\6\7\3\1\6\5\3\3\0\1\3"+
    "\6\6\4\3\2\6\2\3\26\6\1\3\7\6\1\3"+
    "\2\6\1\3\2\6\1\3\2\6\2\3\1\0\1\3"+
    "\5\0\4\3\2\0\2\3\3\0\3\3\1\0\7\3"+
    "\4\6\1\3\1\6\7\3\14\0\3\6\1\0\13\3"+
    "\3\0\1\3\11\6\1\3\3\6\1\3\26\6\1\3"+
    "\7\6\1\3\2\6\1\3\5\6\2\3\1\0\1\6"+
    "\10\0\1\3\3\0\1\3\3\0\2\3\1\6\17\3"+
    "\2\6\2\0\2\3\12\0\1\3\1\6\17\3\3\0"+
    "\1\3\10\6\2\3\2\6\2\3\26\6\1\3\7\6"+
    "\1\3\2\6\1\3\5\6\2\3\1\0\1\6\7\0"+
    "\2\3\2\0\2\3\3\0\10\3\2\0\4\3\2\6"+
    "\1\3\3\6\2\0\2\3\12\0\1\3\1\6\20\3"+
    "\1\0\1\6\1\3\6\6\3\3\3\6\1\3\4\6"+
    "\3\3\2\6\1\3\1\6\1\3\2\6\3\3\2\6"+
    "\3\3\3\6\3\3\14\6\4\3\5\0\3\3\3\0"+
    "\1\3\4\0\2\3\1\6\6\3\1\0\16\3\12\0"+
    "\11\3\1\6\7\3\3\0\1\3\10\6\1\3\3\6"+
    "\1\3\27\6\1\3\12\6\1\3\5\6\3\3\1\6"+
    "\7\0\1\3\3\0\1\3\4\0\7\3\2\0\1\3"+
    "\2\6\6\3\2\6\2\0\2\3\12\0\22\3\2\0"+
    "\1\3\10\6\1\3\3\6\1\3\27\6\1\3\12\6"+
    "\1\3\5\6\2\3\1\0\1\6\7\0\1\3\3\0"+
    "\1\3\4\0\7\3\2\0\7\3\1\6\1\3\2\6"+
    "\2\0\2\3\12\0\1\3\2\6\17\3\2\0\1\3"+
    "\10\6\1\3\3\6\1\3\51\6\2\3\1\6\7\0"+
    "\1\3\3\0\1\3\4\0\1\6\10\3\1\0\10\3"+
    "\2\6\2\0\2\3\12\0\12\3\6\6\2\3\2\0"+
    "\1\3\22\6\3\3\30\6\1\3\11\6\1\3\1\6"+
    "\2\3\7\6\3\3\1\0\4\3\6\0\1\3\1\0"+
    "\1\3\10\0\22\3\2\0\15\3\60\6\1\0\2\6"+
    "\7\0\4\3\10\6\10\0\1\3\12\0\47\3\2\6"+
    "\1\3\1\6\2\3\2\6\1\3\1\6\2\3\1\6"+
    "\6\3\4\6\1\3\7\6\1\3\3\6\1\3\1\6"+
    "\1\3\1\6\2\3\2\6\1\3\4\6\1\0\2\6"+
    "\6\0\1\3\2\0\1\6\2\3\5\6\1\3\1\6"+
    "\1\3\6\0\2\3\12\0\2\3\4\6\40\3\1\6"+
    "\27\3\2\0\6\3\12\0\13\3\1\0\1\3\1\0"+
    "\1\3\1\0\4\3\2\0\10\6\1\3\44\6\4\3"+
    "\24\0\1\3\2\0\5\6\13\0\1\3\44\0\11\3"+
    "\1\0\71\3\53\6\24\0\1\6\12\0\6\3\6\6"+
    "\4\0\4\6\3\0\1\6\3\0\2\6\7\0\3\6"+
    "\4\0\15\6\14\0\1\6\17\0\2\3\46\6\1\3"+
    "\1\6\5\3\1\6\2\3\53\6\1\3\115\6\1\3"+
    "\4\6\2\3\7\6\1\3\1\6\1\3\4\6\2\3"+
    "\51\6\1\3\4\6\2\3\41\6\1\3\4\6\2\3"+
    "\7\6\1\3\1\6\1\3\4\6\2\3\17\6\1\3"+
    "\71\6\1\3\4\6\2\3\103\6\2\3\3\0\40\3"+
    "\20\6\20\3\125\6\14\3\u016c\6\2\3\21\6\1\3"+
    "\32\6\5\3\113\6\3\3\3\6\17\3\15\6\1\3"+
    "\4\6\3\0\13\3\22\6\3\0\13\3\22\6\2\0"+
    "\14\3\15\6\1\3\3\6\1\3\2\0\14\3\64\6"+
    "\40\0\3\3\1\6\3\3\2\6\1\0\2\3\12\0"+
    "\41\3\3\0\2\3\12\0\6\3\130\6\10\3\51\6"+
    "\1\0\1\6\5\3\106\6\12\3\35\6\3\3\14\0"+
    "\4\3\14\0\12\3\12\0\36\6\2\3\5\6\13\3"+
    "\54\6\4\3\21\0\7\6\2\0\6\3\12\0\46\3"+
    "\27\6\5\0\4\3\65\6\12\0\1\3\35\0\2\3"+
    "\13\0\6\3\12\0\15\3\1\6\130\3\5\0\57\6"+
    "\21\0\7\6\4\3\12\0\21\3\11\0\14\3\3\0"+
    "\36\6\15\0\2\6\12\0\54\6\16\0\14\3\44\6"+
    "\24\0\10\3\12\0\3\3\3\6\12\0\44\6\122\3"+
    "\3\0\1\3\25\0\4\6\1\0\4\6\3\0\2\6"+
    "\11\3\300\6\47\0\25\3\4\0\26\6\2\3\6\6"+
    "\2\3\46\6\2\3\6\6\2\3\10\6\1\3\1\6"+
    "\1\3\1\6\1\3\1\6\1\3\37\6\2\3\65\6"+
    "\1\3\7\6\1\3\1\6\3\3\3\6\1\3\7\6"+
    "\3\3\4\6\2\3\6\6\4\3\15\6\5\3\3\6"+
    "\1\3\7\6\16\3\5\0\32\3\5\0\20\3\2\6"+
    "\23\3\1\6\13\3\5\0\5\3\6\0\1\3\1\6"+
    "\15\3\1\6\20\3\15\6\3\3\33\6\25\3\15\0"+
    "\4\3\1\0\3\3\14\0\21\3\1\6\4\3\1\6"+
    "\2\3\12\6\1\3\1\6\3\3\5\6\6\3\1\6"+
    "\1\3\1\6\1\3\1\6\1\3\4\6\1\3\13\6"+
    "\2\3\4\6\5\3\5\6\4\3\1\6\21\3\51\6"+
    "\u0177\3\57\6\1\3\57\6\1\3\205\6\6\3\4\6"+
    "\3\0\2\6\14\3\46\6\1\3\1\6\5\3\1\6"+
    "\2\3\70\6\7\3\1\6\17\3\1\0\27\6\11\3"+
    "\7\6\1\3\7\6\1\3\7\6\1\3\7\6\1\3"+
    "\7\6\1\3\7\6\1\3\7\6\1\3\7\6\1\3"+
    "\40\0\57\3\1\6\325\3\3\6\31\3\11\6\6\0"+
    "\1\3\5\6\2\3\5\6\4\3\126\6\2\3\2\0"+
    "\2\3\3\6\1\3\132\6\1\3\4\6\5\3\51\6"+
    "\3\3\136\6\21\3\33\6\65\3\306\6\112\3\315\6"+
    "\63\3\215\6\103\3\56\6\2\3\15\6\3\3\20\6"+
    "\12\0\2\6\24\3\57\6\1\0\4\3\12\0\1\3"+
    "\31\6\7\3\1\0\120\6\2\0\45\3\11\6\2\3"+
    "\147\6\2\3\4\6\1\3\4\6\14\3\13\6\115\3"+
    "\12\6\1\0\3\6\1\0\4\6\1\0\27\6\5\0"+
    "\20\3\1\6\7\3\64\6\14\3\2\0\62\6\21\0"+
    "\13\3\12\0\6\3\22\0\6\6\3\3\1\6\4\3"+
    "\12\0\34\6\10\0\2\3\27\6\15\0\14\3\35\6"+
    "\3\3\4\0\57\6\16\0\16\3\1\6\12\0\46\3"+
    "\51\6\16\0\11\3\3\6\1\0\10\6\2\0\2\3"+
    "\12\0\6\3\27\6\3\3\1\6\1\0\4\3\60\6"+
    "\1\0\1\6\3\0\2\6\2\0\5\6\2\0\1\6"+
    "\1\0\1\6\30\3\3\6\2\3\13\6\5\0\2\3"+
    "\3\6\2\0\12\3\6\6\2\3\6\6\2\3\6\6"+
    "\11\3\7\6\1\3\7\6\221\3\43\6\10\0\1\3"+
    "\2\0\2\3\12\0\6\3\244\6\14\3\27\6\4\3"+
    "\61\6\4\3\156\6\2\3\152\6\46\3\7\6\14\3"+
    "\5\6\5\3\1\6\1\0\12\6\1\3\15\6\1\3"+
    "\5\6\1\3\1\6\1\3\2\6\1\3\2\6\1\3"+
    "\154\6\41\3\153\6\22\3\100\6\2\3\66\6\50\3"+
    "\15\6\3\3\20\0\20\3\7\0\14\3\2\6\30\3"+
    "\3\6\31\3\1\6\6\3\5\6\1\3\207\6\2\3"+
    "\1\0\4\3\1\6\13\3\12\0\7\3\32\6\4\3"+
    "\1\6\1\3\32\6\13\3\131\6\3\3\6\6\2\3"+
    "\6\6\2\3\6\6\2\3\3\6\3\3\2\6\3\3"+
    "\2\6\22\3\3\0\4\3\14\6\1\3\32\6\1\3"+
    "\23\6\1\3\2\6\1\3\17\6\2\3\16\6\42\3"+
    "\173\6\105\3\65\6\210\3\1\0\202\3\35\6\3\3"+
    "\61\6\57\3\37\6\21\3\33\6\65\3\36\6\2\3"+
    "\44\6\4\3\10\6\1\3\5\6\52\3\236\6\2\3"+
    "\12\0\126\3\6\6\2\3\1\6\1\3\54\6\1\3"+
    "\2\6\3\3\1\6\2\3\27\6\252\3\26\6\12\3"+
    "\32\6\106\3\70\6\6\3\2\6\100\3\1\6\3\0"+
    "\1\3\2\0\5\3\4\0\4\6\1\3\3\6\1\3"+
    "\33\6\4\3\3\0\4\3\1\0\40\3\35\6\203\3"+
    "\66\6\12\3\26\6\12\3\23\6\215\3\111\6\267\3"+
    "\3\0\65\6\17\0\37\3\12\0\20\3\3\0\55\6"+
    "\13\0\2\3\1\0\22\3\31\6\7\3\12\0\6\3"+
    "\3\0\44\6\16\0\1\3\12\0\100\3\3\0\60\6"+
    "\16\0\4\6\13\3\12\0\246\3\53\6\15\0\10\3"+
    "\12\0\66\3\157\6\221\3\143\6\235\3\57\6\321\3"+
    "\71\6\307\3\105\6\13\3\1\6\56\0\20\3\4\0"+
    "\15\6\140\3\2\6\u0163\3\5\0\3\3\26\0\2\3"+
    "\7\0\36\3\4\0\224\3\3\0\273\3\125\6\1\3"+
    "\107\6\1\3\2\6\2\3\1\6\2\3\2\6\2\3"+
    "\4\6\1\3\14\6\1\3\1\6\1\3\7\6\1\3"+
    "\101\6\1\3\4\6\2\3\10\6\1\3\7\6\1\3"+
    "\34\6\1\3\4\6\1\3\5\6\1\3\1\6\3\3"+
    "\7\6\1\3\u0154\6\2\3\31\6\1\3\31\6\1\3"+
    "\37\6\1\3\31\6\1\3\37\6\1\3\31\6\1\3"+
    "\37\6\1\3\31\6\1\3\37\6\1\3\31\6\1\3"+
    "\10\6\2\3\62\0\4\6\1\3\33\6\1\3\2\6"+
    "\1\3\1\6\2\3\1\6\1\3\12\6\1\3\4\6"+
    "\1\3\1\6\1\3\1\6\6\3\1\6\4\3\1\6"+
    "\1\3\1\6\1\3\1\6\1\3\3\6\1\3\2\6"+
    "\1\3\1\6\2\3\1\6\1\3\1\6\1\3\1\6"+
    "\1\3\1\6\1\3\1\6\1\3\2\6\1\3\1\6"+
    "\2\3\4\6\1\3\7\6\1\3\4\6\1\3\4\6"+
    "\1\3\1\6\1\3\12\6\1\3\21\6\5\3\3\6"+
    "\1\3\5\6\1\3\21\6\104\3\327\6\51\3\65\6"+
    "\13\3\336\6\343\3\1\0\36\3\140\0\200\3\360\0"+
    "\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21248];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\1\2\6"+
    "\1\7\2\4\1\10\1\11\1\12\1\0\1\2\1\13"+
    "\3\4\1\14\1\15\1\16\1\17\2\0\3\4\1\0"+
    "\1\2\5\4\1\20\3\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[43];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\31\0\62\0\62\0\113\0\62\0\144\0\62"+
    "\0\175\0\62\0\226\0\257\0\310\0\341\0\372\0\62"+
    "\0\u0113\0\u012c\0\u0145\0\62\0\u015e\0\u0177\0\u0190\0\62"+
    "\0\62\0\62\0\62\0\u01a9\0\u01c2\0\u01db\0\u01f4\0\u020d"+
    "\0\u0226\0\u01a9\0\u023f\0\u0258\0\u0271\0\u028a\0\u02a3\0\144"+
    "\0\u02bc\0\u02d5\0\u02ee";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[43];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\12\1\13\1\14\1\3\1\15\1\16\11\7"+
    "\2\17\1\3\1\17\1\3\1\20\7\17\1\21\13\17"+
    "\33\0\1\4\26\0\1\7\5\0\1\7\3\0\2\7"+
    "\2\0\13\7\7\0\1\22\1\0\1\23\31\0\2\13"+
    "\31\0\1\24\14\0\1\7\5\0\1\7\3\0\2\7"+
    "\2\0\1\7\1\25\12\7\5\0\1\7\3\0\2\7"+
    "\2\0\7\7\1\26\1\27\2\7\2\17\1\0\1\17"+
    "\2\0\7\17\1\0\13\17\5\0\1\30\16\0\1\31"+
    "\1\0\1\32\1\0\1\33\7\34\1\35\21\34\2\23"+
    "\1\4\1\23\1\5\24\23\1\7\5\0\1\7\3\0"+
    "\2\7\2\0\11\7\1\36\2\7\5\0\1\7\3\0"+
    "\2\7\2\0\7\7\1\37\4\7\5\0\1\7\3\0"+
    "\2\7\2\0\3\7\1\40\7\7\7\34\1\41\30\34"+
    "\1\41\1\34\1\42\17\34\1\7\5\0\1\7\3\0"+
    "\2\7\2\0\12\7\1\43\1\7\5\0\1\7\3\0"+
    "\2\7\2\0\5\7\1\44\6\7\5\0\1\7\3\0"+
    "\2\7\2\0\1\45\12\7\7\34\1\41\1\34\1\4"+
    "\17\34\1\7\5\0\1\7\3\0\2\7\2\0\10\7"+
    "\1\46\3\7\5\0\1\7\3\0\2\7\2\0\3\7"+
    "\1\47\10\7\5\0\1\7\3\0\2\7\2\0\4\7"+
    "\1\50\7\7\5\0\1\7\3\0\2\7\2\0\1\51"+
    "\13\7\5\0\1\7\3\0\2\7\2\0\1\52\13\7"+
    "\5\0\1\7\3\0\2\7\2\0\2\7\1\53\11\7"+
    "\5\0\1\7\3\0\2\7\2\0\6\7\1\50\5\7"+
    "\5\0\1\7\3\0\2\7\2\0\12\7\1\50";

  private static int [] zzUnpackTrans() {
    int [] result = new int[775];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\5\1\1\11\1\1\1\0\1\1\1\11\3\1\4\11"+
    "\2\0\3\1\1\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = 